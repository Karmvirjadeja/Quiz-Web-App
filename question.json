[
  {
    "id": 1,
    "text": "What is Node.js?",
    "options": [
      { "index": 0, "text": "A front-end JavaScript framework" },
      { "index": 1, "text": "A back-end JavaScript runtime" },
      { "index": 2, "text": "A database management system" },
      { "index": 3, "text": "A programming language" }
    ],
    "answer": 1
  },
  {
    "id": 2,
    "text": "How does Node.js handle blocking I/O operations?",
    "options": [
      { "index": 0, "text": "By using synchronous functions" },
      { "index": 1, "text": "By using asynchronous functions" },
      { "index": 2, "text": "By using multi-threading" },
      { "index": 3, "text": "By using callbacks" }
    ],
    "answer": 0
  },
  {
    "id": 3,
    "text": "What is the Node.js event loop?",
    "options": [
      { "index": 0, "text": "A loop that processes HTTP requests" },
      { "index": 1, "text": "A loop that handles asynchronous operations" },
      { "index": 2, "text": "A loop that manages file I/O operations" },
      { "index": 3, "text": "A loop that manages memory allocation" }
    ],
    "answer": 1
  },
  {
    "id": 4,
    "text": "What is a callback function in Node.js?",
    "options": [
      { "index": 0, "text": "A function that is called after a delay" },
      { "index": 1, "text": "A function that is called at the end of a program" },
      { "index": 2, "text": "A function that is passed as an argument to another function" },
      { "index": 3, "text": "A function that is used to handle errors" }
    ],
    "answer": 2
  },
  {
    "id": 5,
    "text": "How can you include a module in a Node.js application?",
    "options": [
      { "index": 0, "text": "By using the import keyword" },
      { "index": 1, "text": "By using the require() function" },
      { "index": 2, "text": "By using the include() function" },
      { "index": 3, "text": "By using the module() function" }
    ],
    "answer": 1
  },
  {
    "id": 6,
    "text": "What is the purpose of the Node.js fs module?",
    "options": [
      { "index": 0, "text": "To handle file system operations" },
      { "index": 1, "text": "To handle HTTP requests" },
      { "index": 2, "text": "To manage databases" },
      { "index": 3, "text": "To manage user sessions" }
    ],
    "answer": 0
  },
  {
    "id": 7,
    "text": "What is the purpose of the Node.js util module?",
    "options": [
      { "index": 0, "text": "To handle utility functions" },
      { "index": 1, "text": "To handle file system operations" },
      { "index": 2, "text": "To manage user authentication" },
      { "index": 3, "text": "To manage database connections" }
    ],
    "answer": 0
  },
  {
    "id": 8,
    "text": "How can you create a web server in Node.js?",
    "options": [
      { "index": 0, "text": "By using the createServer() method from the http module" },
      { "index": 1, "text": "By using the listen() method from the express module" },
      { "index": 2, "text": "By using the server() method from the net module" },
      { "index": 3, "text": "By using the server() method from the http module" }
    ],
    "answer": 0
  },
  {
    "id": 9,
    "text": "What is the purpose of the Node.js crypto module?",
    "options": [
      { "index": 0, "text": "To handle HTTP requests" },
      { "index": 1, "text": "To perform cryptographic operations" },
      { "index": 2, "text": "To manage user authentication" },
      { "index": 3, "text": "To manage database connections" }
    ],
    "answer": 1
  },
  {
    "id": 10,
    "text": "Which of the following is a core module in Node.js?",
    "options": [
      { "index": 0, "text": "fs (File System)" },
      { "index": 1, "text": "http (HTTP)" },
      { "index": 2, "text": "express (Express.js)" },
      { "index": 3, "text": "mysql (MySQL)" }
    ],
    "answer": 0
  }
]
